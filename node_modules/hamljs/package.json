{
  "name": "hamljs",
  "description": "Faster / Express compliant Haml implementation",
  "version": "0.6.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/haml.js.git"
  },
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "main": "lib/haml.js",
  "readme": "# Haml.js\n\n  High performance JavaScript [Haml](http://haml-lang.com) implementation for [nodejs](http://nodejs.org)\n  \n  For a higher quality implementation you may want to look at my [Jade](http://jade-lang.com) template engine,\n  however the syntax is slightly different. Jade's engine may be back-ported to haml.js in the future.\n\n## Installation\n\n      $ npm install hamljs\n\n      node> require('hamljs')\n\n## Express\n\n To use with [Express](http://expressjs.com) and the .haml extension, simply register the engine:\n \n     app.engine('.haml', require('hamljs').renderFile);\n\n## About\n\n  Benchmarks rendering the same 21 line haml file located at _benchmarks/page.haml_,\n  shows that this library is nearly **65%** or **3 times** faster than haml-js.\n  \n      Winner: haml.js\n      Compared with next highest (haml-js), it's:\n      65.39% faster\n      2.89 times as fast\n      0 order(s) of magnitude faster\n\n  Haml.js attempts to comply with the original [Haml](http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html)\n  implementation as well as possible. There are no magic \"plugins\" like\n  found in other JavaScript haml implementations, for example the following\n  will work just fine:\n  \n    - if (items)\n      %ul\n        - for (var i = 0; i < items.length; ++i)\n          %li= items[i]\n  \n  Iteration is the one exception to these magical plugins,\n  since this is **ugly** in JavaScript, you may also:\n  \n    - if (items)\n      %ul\n        - each item in items\n          %li= item\n          \n## Tags\n\n    %div text\n\nhtml:\n\n    <div>text</div>\n    \n## Classes\n\n    %div.article.first\n      article text here\n      and here\n      \nhtml:\n\n    <div class=\"article first\">\n      article text here and here\n    </div>\n    \n## Div Class Shortcut\n\n    .comment hey\n    \nhtml:\n\n    <div class=\"comment\">hey</div>\n    \n## Div Id Shortcut\n\n    #article-1 foo\n    \nhtml:\n\n    <div id=\"article-1\">foo</div>\n    \n## Combining Ids and Classes\n\nYou may chain id and classes in any order:\n\n    .article#first.summary content\n    \nhtml:\n\n    <div id=\"first\" class=\"article summary\">context</div>\n    \n## Attributes\n\n    %a{ href: 'http://google.com', title: 'Google It' } Google\n    \nhtml:\n\n    <a href=\"http://google.com\" title=\"Google It\">Google</a>\n\nAttribute keys such as \"for\" are automatically quoted\nby haml.js, so instead of:\n\n    %label{ 'for': 'something' }\n\nyou should:\n\n    %label{ for: 'something' }\n\nwhich will render:\n\n    <label for=\"something\"></label>\n    \n## Boolean Attributes\n\n    %input{ type: 'checkbox', checked: true }\n    \nhtml:\n\n    <input type=\"checkbox\" checked=\"checked\"/>\n    \n## Combining Attributes, Ids, and Classes\n    \nWemay also contain id and classes before or after:\n\n    %a.button{ href: 'http://google.com', title: 'Google It' }.first Google\n    \nhtml:\n\n    <a href=\"http://google.com\" title=\"Google It\" class=\"button first\">Google</a>\n    \n## Code\n\nCode starting with a hyphen will be executed but\nnot buffered, where as code using the equals sign\nwill be buffered:\n\n    - a = 1\n    - b = 2\n    = a + b\n    \nhtml:\n\n    3\n    \nHTML buffered with equals sign will **always** be escaped:\n\n    = \"<br/>\"\n    \nhtml:\n   \n    &lt;br/&gt;\n    \nTo prevent escaping of HTML entities we can use _!=_:\n\n    != \"<br/>\"\n    \nhtml:\n\n    <br/>\n    \n## Iteration\n\n    %ul\n      - each item in items\n        %li= item\n        \nhtml:\n\n    <ul>\n      <li>one</li>\n      <li>two</li>\n      <li>three</li>\n    </ul>\n    \nIf you require the key or index of the object\nor array during iteration simple append a comma\nfollowing another id:\n\n    %ul\n      - each item, index in items\n        %li= item + '(' + index + ')'\n        \nhtml:\n\n    <ul>\n      <li>one(0)</li>\n      <li>two(1)</li>\n      <li>three(2)</li>\n    </ul>\n    \n## Doctypes\n\nDefaults to transitional:\n    \n    !!!\n    \nhtml:\n\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    \nOptionally pass a supported doctype name:\n\n    !!! strict\n    \nhtml:\n\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\ncurrently supported doctypes, which can be\nextended simply by adding values to to _haml.doctypes_.\n\n    '5': '<!DOCTYPE html>',\n    'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n    'default': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n    'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n    'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n    '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n    'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n    'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n\n\n## :cdata\n\n    %script\n      :cdata\n        foo\n        \nhtml:\n\n    <script><![CDATA[\n    foo\n    ]]></script>\n    \n## :javascript\n\n    %head\n      :javascript\n        if (foo)\n          if (bar)\n            alert('baz')\n      \nhtml:\n\n    <head>\n      <script type=\"javascript\">\n      //<![CDATA[\n      if (foo)\n        if (bar)\n          alert('baz')\n      //]]>\n      </script>\n    </head>\n    \n## Extending Haml\n\n### Adding Filters\n\n    var haml = require('haml')\n    haml.filters.my_filter = function(str) {\n      return doSomethingWith(str)\n    }\n\nby registering the filter function _my_filter_ we can now\nutilize it within our Haml templates as shown below:\n    %p\n      :my_filter\n        some text\n        here yay\n        whoop awesome\n\n### Adding Doctypes\n\n    var haml = require('haml')\n    haml.doctypes.foo = '<!DOCTYPE ... >'\n    \nWill now allow you to:\n    !!! foo\n    \n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "_id": "hamljs@0.6.1",
  "dist": {
    "shasum": "680e35d229debc38844448e68a493f1fbebdbec9"
  },
  "_from": "hamljs@*",
  "_resolved": "https://registry.npmjs.org/hamljs/-/hamljs-0.6.1.tgz"
}
